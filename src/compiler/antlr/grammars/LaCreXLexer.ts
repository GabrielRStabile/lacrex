// Generated from antlr/grammars/LaCreXLexer.g4 by ANTLR 4.9.0-SNAPSHOT

import { CharStream } from 'antlr4ts/CharStream'
import { Lexer } from 'antlr4ts/Lexer'
import { Vocabulary } from 'antlr4ts/Vocabulary'
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl'
import { ATN } from 'antlr4ts/atn/ATN'
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer'
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator'

import * as Utils from 'antlr4ts/misc/Utils'

export class LaCreXLexer extends Lexer {
  public static readonly WhiteSpace = 1
  public static readonly VIRGULA = 2
  public static readonly PONTOEVIRGULA = 3
  public static readonly LPAREN = 4
  public static readonly RPAREN = 5
  public static readonly LCURLY = 6
  public static readonly RCURLY = 7
  public static readonly OPERADOR_ATRIBUICAO = 8
  public static readonly OPERADOR_CONDICIONAL = 9
  public static readonly SE = 10
  public static readonly SENAO = 11
  public static readonly FOREACH = 12
  public static readonly WHILE = 13
  public static readonly MAIN = 14
  public static readonly DEFINE_FUNCAO = 15
  public static readonly BOOLEANO = 16
  public static readonly PALAVRA = 17
  public static readonly NOME_VARIAVEL = 18
  public static readonly LETRA = 19
  public static readonly DIGITO = 20
  public static readonly DECREMENTO_OU_INCREMENTO = 21
  public static readonly TIPOS = 22
  public static readonly TIPAGEM = 23
  public static readonly NULAVEL = 24

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = [
    'DEFAULT_TOKEN_CHANNEL',
    'HIDDEN',
  ]

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE']

  public static readonly ruleNames: string[] = [
    'WhiteSpace',
    'VIRGULA',
    'PONTOEVIRGULA',
    'LPAREN',
    'RPAREN',
    'LCURLY',
    'RCURLY',
    'OPERADOR_ATRIBUICAO',
    'OPERADOR_CONDICIONAL',
    'SE',
    'SENAO',
    'FOREACH',
    'WHILE',
    'MAIN',
    'DEFINE_FUNCAO',
    'BOOLEANO',
    'PALAVRA',
    'NOME_VARIAVEL',
    'LETRA',
    'DIGITO',
    'DECREMENTO_OU_INCREMENTO',
    'TIPOS',
    'TIPAGEM',
    'NULAVEL',
  ]

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    "','",
    "';'",
    "'('",
    "')'",
    "'{'",
    "'}'",
    "'\uD83D\uDC8B'",
    undefined,
    "'elu'",
    "'delu'",
    "'segue o fio'",
    "'comofas'",
    "'o codigo de milhoes'",
    "'qualquer coisa avisa'",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "'cancelado'",
  ]

  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    'WhiteSpace',
    'VIRGULA',
    'PONTOEVIRGULA',
    'LPAREN',
    'RPAREN',
    'LCURLY',
    'RCURLY',
    'OPERADOR_ATRIBUICAO',
    'OPERADOR_CONDICIONAL',
    'SE',
    'SENAO',
    'FOREACH',
    'WHILE',
    'MAIN',
    'DEFINE_FUNCAO',
    'BOOLEANO',
    'PALAVRA',
    'NOME_VARIAVEL',
    'LETRA',
    'DIGITO',
    'DECREMENTO_OU_INCREMENTO',
    'TIPOS',
    'TIPAGEM',
    'NULAVEL',
  ]

  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    LaCreXLexer._LITERAL_NAMES,
    LaCreXLexer._SYMBOLIC_NAMES,
    [],
  )

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return LaCreXLexer.VOCABULARY
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input)
    this._interp = new LexerATNSimulator(LaCreXLexer._ATN, this)
  }

  // @Override
  public get grammarFileName(): string {
    return 'LaCreXLexer.g4'
  }

  // @Override
  public get ruleNames(): string[] {
    return LaCreXLexer.ruleNames
  }

  // @Override
  public get serializedATN(): string {
    return LaCreXLexer._serializedATN
  }

  // @Override
  public get channelNames(): string[] {
    return LaCreXLexer.channelNames
  }

  // @Override
  public get modeNames(): string[] {
    return LaCreXLexer.modeNames
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1A\u0100\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x03\x02\x06\x025\n\x02\r\x02\x0E\x02' +
    '6\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03' +
    '\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\n' +
    '\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03' +
    '\n\x03\n\x05\nY\n\n\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03' +
    '\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03' +
    '\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03' +
    '\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03' +
    '\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03' +
    '\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03' +
    '\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03' +
    '\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03' +
    '\x11\x03\x11\x05\x11\xA7\n\x11\x03\x12\x03\x12\x03\x12\x03\x12\x07\x12' +
    '\xAD\n\x12\f\x12\x0E\x12\xB0\v\x12\x03\x12\x03\x12\x03\x13\x03\x13\x07' +
    '\x13\xB6\n\x13\f\x13\x0E\x13\xB9\v\x13\x03\x14\x03\x14\x03\x15\x06\x15' +
    '\xBE\n\x15\r\x15\x0E\x15\xBF\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03' +
    '\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03' +
    '\x16\x03\x16\x03\x16\x03\x16\x03\x16\x05\x16\xD5\n\x16\x03\x17\x03\x17' +
    '\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17' +
    '\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17' +
    '\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x05\x17\xF1\n\x17\x03' +
    '\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03' +
    '\x19\x03\x19\x03\x19\x03\x19\x03\x19\x02\x02\x02\x1A\x03\x02\x03\x05\x02' +
    '\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02' +
    '\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11' +
    "!\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02" +
    '\x191\x02\x1A\x03\x02\n\x05\x02\v\f\x0F\x0F""\x04\x02>>@@\x06\x02\f' +
    '\f\x0F\x0F$$^^\x04\x02$$^^\x05\x02C\\aac|\x06\x022;C\\aac|\x04\x02C\\' +
    'c|\x03\x022;\x03\x03\x02\uF48D\x03\uF48D\x03\u010F\x02\x03\x03\x02\x02' +
    '\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02' +
    '\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02' +
    '\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02' +
    '\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02' +
    '\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02' +
    "\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03\x02\x02\x02\x02)" +
    '\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02' +
    '\x02\x02\x021\x03\x02\x02\x02\x034\x03\x02\x02\x02\x05:\x03\x02\x02\x02' +
    '\x07<\x03\x02\x02\x02\t>\x03\x02\x02\x02\v@\x03\x02\x02\x02\rB\x03\x02' +
    '\x02\x02\x0FD\x03\x02\x02\x02\x11F\x03\x02\x02\x02\x13X\x03\x02\x02\x02' +
    '\x15Z\x03\x02\x02\x02\x17^\x03\x02\x02\x02\x19c\x03\x02\x02\x02\x1Bo\x03' +
    '\x02\x02\x02\x1Dw\x03\x02\x02\x02\x1F\x8B\x03\x02\x02\x02!\xA6\x03\x02' +
    "\x02\x02#\xA8\x03\x02\x02\x02%\xB3\x03\x02\x02\x02'\xBA\x03\x02\x02\x02" +
    ')\xBD\x03\x02\x02\x02+\xD4\x03\x02\x02\x02-\xF0\x03\x02\x02\x02/\xF2\x03' +
    '\x02\x02\x021\xF6\x03\x02\x02\x0235\t\x02\x02\x0243\x03\x02\x02\x0256' +
    '\x03\x02\x02\x0264\x03\x02\x02\x0267\x03\x02\x02\x0278\x03\x02\x02\x02' +
    '89\b\x02\x02\x029\x04\x03\x02\x02\x02:;\x07.\x02\x02;\x06\x03\x02\x02' +
    '\x02<=\x07=\x02\x02=\b\x03\x02\x02\x02>?\x07*\x02\x02?\n\x03\x02\x02\x02' +
    '@A\x07+\x02\x02A\f\x03\x02\x02\x02BC\x07}\x02\x02C\x0E\x03\x02\x02\x02' +
    'DE\x07\x7F\x02\x02E\x10\x03\x02\x02\x02FG\t\n\x02\x02G\x12\x03\x02\x02' +
    '\x02HY\t\x03\x02\x02IJ\x07>\x02\x02JY\x07?\x02\x02KL\x07@\x02\x02LY\x07' +
    '?\x02\x02MN\x07g\x02\x02NY\x07j\x02\x02OP\x07p\x02\x02PQ\x07c\x02\x02' +
    'QR\x07q\x02\x02RS\x07g\x02\x02SY\x07j\x02\x02TU\x07(\x02\x02UY\x07(\x02' +
    '\x02VW\x07~\x02\x02WY\x07~\x02\x02XH\x03\x02\x02\x02XI\x03\x02\x02\x02' +
    'XK\x03\x02\x02\x02XM\x03\x02\x02\x02XO\x03\x02\x02\x02XT\x03\x02\x02\x02' +
    'XV\x03\x02\x02\x02Y\x14\x03\x02\x02\x02Z[\x07g\x02\x02[\\\x07n\x02\x02' +
    '\\]\x07w\x02\x02]\x16\x03\x02\x02\x02^_\x07f\x02\x02_`\x07g\x02\x02`a' +
    '\x07n\x02\x02ab\x07w\x02\x02b\x18\x03\x02\x02\x02cd\x07u\x02\x02de\x07' +
    'g\x02\x02ef\x07i\x02\x02fg\x07w\x02\x02gh\x07g\x02\x02hi\x07"\x02\x02' +
    'ij\x07q\x02\x02jk\x07"\x02\x02kl\x07h\x02\x02lm\x07k\x02\x02mn\x07q\x02' +
    '\x02n\x1A\x03\x02\x02\x02op\x07e\x02\x02pq\x07q\x02\x02qr\x07o\x02\x02' +
    'rs\x07q\x02\x02st\x07h\x02\x02tu\x07c\x02\x02uv\x07u\x02\x02v\x1C\x03' +
    '\x02\x02\x02wx\x07q\x02\x02xy\x07"\x02\x02yz\x07e\x02\x02z{\x07q\x02' +
    '\x02{|\x07f\x02\x02|}\x07k\x02\x02}~\x07i\x02\x02~\x7F\x07q\x02\x02\x7F' +
    '\x80\x07"\x02\x02\x80\x81\x07f\x02\x02\x81\x82\x07g\x02\x02\x82\x83\x07' +
    '"\x02\x02\x83\x84\x07o\x02\x02\x84\x85\x07k\x02\x02\x85\x86\x07n\x02' +
    '\x02\x86\x87\x07j\x02\x02\x87\x88\x07q\x02\x02\x88\x89\x07g\x02\x02\x89' +
    '\x8A\x07u\x02\x02\x8A\x1E\x03\x02\x02\x02\x8B\x8C\x07s\x02\x02\x8C\x8D' +
    '\x07w\x02\x02\x8D\x8E\x07c\x02\x02\x8E\x8F\x07n\x02\x02\x8F\x90\x07s\x02' +
    '\x02\x90\x91\x07w\x02\x02\x91\x92\x07g\x02\x02\x92\x93\x07t\x02\x02\x93' +
    '\x94\x07"\x02\x02\x94\x95\x07e\x02\x02\x95\x96\x07q\x02\x02\x96\x97\x07' +
    'k\x02\x02\x97\x98\x07u\x02\x02\x98\x99\x07c\x02\x02\x99\x9A\x07"\x02' +
    '\x02\x9A\x9B\x07c\x02\x02\x9B\x9C\x07x\x02\x02\x9C\x9D\x07k\x02\x02\x9D' +
    '\x9E\x07u\x02\x02\x9E\x9F\x07c\x02\x02\x9F \x03\x02\x02\x02\xA0\xA1\x07' +
    'u\x02\x02\xA1\xA2\x07k\x02\x02\xA2\xA7\x07o\x02\x02\xA3\xA4\x07p\x02\x02' +
    '\xA4\xA5\x07c\x02\x02\xA5\xA7\x07q\x02\x02\xA6\xA0\x03\x02\x02\x02\xA6' +
    '\xA3\x03\x02\x02\x02\xA7"\x03\x02\x02\x02\xA8\xAE\x07$\x02\x02\xA9\xAD' +
    '\n\x04\x02\x02\xAA\xAB\x07^\x02\x02\xAB\xAD\t\x05\x02\x02\xAC\xA9\x03' +
    '\x02\x02\x02\xAC\xAA\x03\x02\x02\x02\xAD\xB0\x03\x02\x02\x02\xAE\xAC\x03' +
    '\x02\x02\x02\xAE\xAF\x03\x02\x02\x02\xAF\xB1\x03\x02\x02\x02\xB0\xAE\x03' +
    '\x02\x02\x02\xB1\xB2\x07$\x02\x02\xB2$\x03\x02\x02\x02\xB3\xB7\t\x06\x02' +
    '\x02\xB4\xB6\t\x07\x02\x02\xB5\xB4\x03\x02\x02\x02\xB6\xB9\x03\x02\x02' +
    '\x02\xB7\xB5\x03\x02\x02\x02\xB7\xB8\x03\x02\x02\x02\xB8&\x03\x02\x02' +
    '\x02\xB9\xB7\x03\x02\x02\x02\xBA\xBB\t\b\x02\x02\xBB(\x03\x02\x02\x02' +
    '\xBC\xBE\t\t\x02\x02\xBD\xBC\x03\x02\x02\x02\xBE\xBF\x03\x02\x02\x02\xBF' +
    '\xBD\x03\x02\x02\x02\xBF\xC0\x03\x02\x02\x02\xC0*\x03\x02\x02\x02\xC1' +
    '\xC2\x07u\x02\x02\xC2\xC3\x07g\x02\x02\xC3\xC4\x07l\x02\x02\xC4\xC5\x07' +
    'g\x02\x02\xC5\xC6\x07"\x02\x02\xC6\xC7\x07o\x02\x02\xC7\xC8\x07g\x02' +
    '\x02\xC8\xC9\x07p\x02\x02\xC9\xCA\x07q\x02\x02\xCA\xD5\x07u\x02\x02\xCB' +
    '\xCC\x07u\x02\x02\xCC\xCD\x07g\x02\x02\xCD\xCE\x07l\x02\x02\xCE\xCF\x07' +
    'g\x02\x02\xCF\xD0\x07"\x02\x02\xD0\xD1\x07o\x02\x02\xD1\xD2\x07c\x02' +
    '\x02\xD2\xD3\x07k\x02\x02\xD3\xD5\x07u\x02\x02\xD4\xC1\x03\x02\x02\x02' +
    '\xD4\xCB\x03\x02\x02\x02\xD5,\x03\x02\x02\x02\xD6\xD7\x07j\x02\x02\xD7' +
    '\xD8\x07g\x02\x02\xD8\xD9\x07v\x02\x02\xD9\xDA\x07g\x02\x02\xDA\xDB\x07' +
    't\x02\x02\xDB\xF1\x07q\x02\x02\xDC\xDD\x07d\x02\x02\xDD\xDE\x07k\x02\x02' +
    '\xDE\xDF\x07u\x02\x02\xDF\xE0\x07u\x02\x02\xE0\xE1\x07g\x02\x02\xE1\xE2' +
    '\x07z\x02\x02\xE2\xE3\x07w\x02\x02\xE3\xE4\x07c\x02\x02\xE4\xF1\x07n\x02' +
    '\x02\xE5\xE6\x07o\x02\x02\xE6\xE7\x07q\x02\x02\xE7\xE8\x07p\x02\x02\xE8' +
    '\xF1\x07c\x02\x02\xE9\xEA\x07q\x02\x02\xEA\xEB\x07n\x02\x02\xEB\xEC\x07' +
    'f\x02\x02\xEC\xED\x07"\x02\x02\xED\xEE\x07s\x02\x02\xEE\xEF\x07w\x02' +
    '\x02\xEF\xF1\x07g\x02\x02\xF0\xD6\x03\x02\x02\x02\xF0\xDC\x03\x02\x02' +
    '\x02\xF0\xE5\x03\x02\x02\x02\xF0\xE9\x03\x02\x02\x02\xF1.\x03\x02\x02' +
    '\x02\xF2\xF3\x07]\x02\x02\xF3\xF4\x05-\x17\x02\xF4\xF5\x07_\x02\x02\xF5' +
    '0\x03\x02\x02\x02\xF6\xF7\x07e\x02\x02\xF7\xF8\x07c\x02\x02\xF8\xF9\x07' +
    'p\x02\x02\xF9\xFA\x07e\x02\x02\xFA\xFB\x07g\x02\x02\xFB\xFC\x07n\x02\x02' +
    '\xFC\xFD\x07c\x02\x02\xFD\xFE\x07f\x02\x02\xFE\xFF\x07q\x02\x02\xFF2\x03' +
    '\x02\x02\x02\f\x026X\xA6\xAC\xAE\xB7\xBF\xD4\xF0\x03\b\x02\x02'

  public static __ATN: ATN
  public static get _ATN(): ATN {
    if (!LaCreXLexer.__ATN) {
      LaCreXLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(LaCreXLexer._serializedATN),
      )
    }

    return LaCreXLexer.__ATN
  }
}

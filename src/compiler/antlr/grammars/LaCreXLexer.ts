// Generated from antlr/grammars/LaCreXLexer.g4 by ANTLR 4.9.0-SNAPSHOT

import { CharStream } from 'antlr4ts/CharStream'
import { Lexer } from 'antlr4ts/Lexer'
import { Vocabulary } from 'antlr4ts/Vocabulary'
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl'
import { ATN } from 'antlr4ts/atn/ATN'
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer'
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator'

import * as Utils from 'antlr4ts/misc/Utils'

export class LaCreXLexer extends Lexer {
  public static readonly WhiteSpace = 1
  public static readonly COMMA = 2
  public static readonly PONTOEVIRGULA = 3
  public static readonly LPAREN = 4
  public static readonly RPAREN = 5
  public static readonly LCURLY = 6
  public static readonly RCURLY = 7
  public static readonly SE = 8
  public static readonly SENAO = 9
  public static readonly FOREACH = 10
  public static readonly WHILE = 11
  public static readonly BOOLEANO = 12
  public static readonly NOMEVARIAVEL = 13
  public static readonly LETRA = 14
  public static readonly DIGITO = 15
  public static readonly DECREMENTOOUINCREMENTO = 16
  public static readonly TIPOS = 17
  public static readonly TIPAGEM = 18
  public static readonly NULAVEL = 19
  public static readonly OPERADORATRIBUICAO = 20
  public static readonly OPERADORCONDICIONAL = 21

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = [
    'DEFAULT_TOKEN_CHANNEL',
    'HIDDEN',
  ]

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE']

  public static readonly ruleNames: string[] = [
    'WhiteSpace',
    'COMMA',
    'PONTOEVIRGULA',
    'LPAREN',
    'RPAREN',
    'LCURLY',
    'RCURLY',
    'SE',
    'SENAO',
    'FOREACH',
    'WHILE',
    'BOOLEANO',
    'NOMEVARIAVEL',
    'LETRA',
    'DIGITO',
    'DECREMENTOOUINCREMENTO',
    'TIPOS',
    'TIPAGEM',
    'NULAVEL',
    'OPERADORATRIBUICAO',
    'OPERADORCONDICIONAL',
  ]

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    "','",
    "';'",
    "'('",
    "')'",
    "'{'",
    "'}'",
    "'elu'",
    "'delu'",
    "'segue o fio'",
    "'comofas'",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "'cancelado'",
    "'\uD83D\uDC8B'",
  ]

  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    'WhiteSpace',
    'COMMA',
    'PONTOEVIRGULA',
    'LPAREN',
    'RPAREN',
    'LCURLY',
    'RCURLY',
    'SE',
    'SENAO',
    'FOREACH',
    'WHILE',
    'BOOLEANO',
    'NOMEVARIAVEL',
    'LETRA',
    'DIGITO',
    'DECREMENTOOUINCREMENTO',
    'TIPOS',
    'TIPAGEM',
    'NULAVEL',
    'OPERADORATRIBUICAO',
    'OPERADORCONDICIONAL',
  ]

  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    LaCreXLexer._LITERAL_NAMES,
    LaCreXLexer._SYMBOLIC_NAMES,
    [],
  )

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return LaCreXLexer.VOCABULARY
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input)
    this._interp = new LexerATNSimulator(LaCreXLexer._ATN, this)
  }

  // @Override
  public get grammarFileName(): string {
    return 'LaCreXLexer.g4'
  }

  // @Override
  public get ruleNames(): string[] {
    return LaCreXLexer.ruleNames
  }

  // @Override
  public get serializedATN(): string {
    return LaCreXLexer._serializedATN
  }

  // @Override
  public get channelNames(): string[] {
    return LaCreXLexer.channelNames
  }

  // @Override
  public get modeNames(): string[] {
    return LaCreXLexer.modeNames
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x17\xBF\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x03\x02\x06' +
    '\x02/\n\x02\r\x02\x0E\x020\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03' +
    '\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t' +
    '\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03' +
    '\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03' +
    '\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x05\rd' +
    '\n\r\x03\x0E\x03\x0E\x07\x0Eh\n\x0E\f\x0E\x0E\x0Ek\v\x0E\x03\x0F\x03\x0F' +
    '\x03\x10\x06\x10p\n\x10\r\x10\x0E\x10q\x03\x11\x03\x11\x03\x11\x03\x11' +
    '\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11' +
    '\x80\n\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03' +
    '\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03' +
    '\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03' +
    '\x12\x05\x12\x9C\n\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14' +
    '\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15' +
    '\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16' +
    '\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x05\x16' +
    '\xBE\n\x16\x02\x02\x02\x17\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06' +
    '\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19' +
    '\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14' +
    '\'\x02\x15)\x02\x16+\x02\x17\x03\x02\b\x05\x02\v\f\x0F\x0F""\x05\x02' +
    'C\\aac|\x06\x022;C\\aac|\x04\x02C\\c|\x03\x022;\x04\x02>>@@\x03\x03\x02' +
    '\uF48D\x03\uF48D\x03\xCC\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02' +
    '\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02' +
    '\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02' +
    '\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02' +
    '\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02' +
    '\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03' +
    "\x02\x02\x02\x02'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02" +
    '\x02\x03.\x03\x02\x02\x02\x054\x03\x02\x02\x02\x076\x03\x02\x02\x02\t' +
    '8\x03\x02\x02\x02\v:\x03\x02\x02\x02\r<\x03\x02\x02\x02\x0F>\x03\x02\x02' +
    '\x02\x11@\x03\x02\x02\x02\x13D\x03\x02\x02\x02\x15I\x03\x02\x02\x02\x17' +
    'U\x03\x02\x02\x02\x19c\x03\x02\x02\x02\x1Be\x03\x02\x02\x02\x1Dl\x03\x02' +
    '\x02\x02\x1Fo\x03\x02\x02\x02!\x7F\x03\x02\x02\x02#\x9B\x03\x02\x02\x02' +
    "%\x9D\x03\x02\x02\x02'\xA1\x03\x02\x02\x02)\xAB\x03\x02\x02\x02+\xBD" +
    '\x03\x02\x02\x02-/\t\x02\x02\x02.-\x03\x02\x02\x02/0\x03\x02\x02\x020' +
    '.\x03\x02\x02\x0201\x03\x02\x02\x0212\x03\x02\x02\x0223\b\x02\x02\x02' +
    '3\x04\x03\x02\x02\x0245\x07.\x02\x025\x06\x03\x02\x02\x0267\x07=\x02\x02' +
    '7\b\x03\x02\x02\x0289\x07*\x02\x029\n\x03\x02\x02\x02:;\x07+\x02\x02;' +
    '\f\x03\x02\x02\x02<=\x07}\x02\x02=\x0E\x03\x02\x02\x02>?\x07\x7F\x02\x02' +
    '?\x10\x03\x02\x02\x02@A\x07g\x02\x02AB\x07n\x02\x02BC\x07w\x02\x02C\x12' +
    '\x03\x02\x02\x02DE\x07f\x02\x02EF\x07g\x02\x02FG\x07n\x02\x02GH\x07w\x02' +
    '\x02H\x14\x03\x02\x02\x02IJ\x07u\x02\x02JK\x07g\x02\x02KL\x07i\x02\x02' +
    'LM\x07w\x02\x02MN\x07g\x02\x02NO\x07"\x02\x02OP\x07q\x02\x02PQ\x07"' +
    '\x02\x02QR\x07h\x02\x02RS\x07k\x02\x02ST\x07q\x02\x02T\x16\x03\x02\x02' +
    '\x02UV\x07e\x02\x02VW\x07q\x02\x02WX\x07o\x02\x02XY\x07q\x02\x02YZ\x07' +
    'h\x02\x02Z[\x07c\x02\x02[\\\x07u\x02\x02\\\x18\x03\x02\x02\x02]^\x07u' +
    '\x02\x02^_\x07k\x02\x02_d\x07o\x02\x02`a\x07p\x02\x02ab\x07c\x02\x02b' +
    'd\x07q\x02\x02c]\x03\x02\x02\x02c`\x03\x02\x02\x02d\x1A\x03\x02\x02\x02' +
    'ei\t\x03\x02\x02fh\t\x04\x02\x02gf\x03\x02\x02\x02hk\x03\x02\x02\x02i' +
    'g\x03\x02\x02\x02ij\x03\x02\x02\x02j\x1C\x03\x02\x02\x02ki\x03\x02\x02' +
    '\x02lm\t\x05\x02\x02m\x1E\x03\x02\x02\x02np\t\x06\x02\x02on\x03\x02\x02' +
    '\x02pq\x03\x02\x02\x02qo\x03\x02\x02\x02qr\x03\x02\x02\x02r \x03\x02\x02' +
    '\x02st\x07u\x02\x02tu\x07g\x02\x02uv\x07l\x02\x02vw\x07g\x02\x02wx\x07' +
    '"\x02\x02xy\x07o\x02\x02yz\x07g\x02\x02z{\x07p\x02\x02{|\x07q\x02\x02' +
    '|\x80\x07u\x02\x02}~\x07-\x02\x02~\x80\x07-\x02\x02\x7Fs\x03\x02\x02\x02' +
    '\x7F}\x03\x02\x02\x02\x80"\x03\x02\x02\x02\x81\x82\x07j\x02\x02\x82\x83' +
    '\x07g\x02\x02\x83\x84\x07v\x02\x02\x84\x85\x07g\x02\x02\x85\x86\x07t\x02' +
    '\x02\x86\x9C\x07q\x02\x02\x87\x88\x07d\x02\x02\x88\x89\x07k\x02\x02\x89' +
    '\x8A\x07u\x02\x02\x8A\x8B\x07u\x02\x02\x8B\x8C\x07g\x02\x02\x8C\x8D\x07' +
    'z\x02\x02\x8D\x8E\x07w\x02\x02\x8E\x8F\x07c\x02\x02\x8F\x9C\x07n\x02\x02' +
    '\x90\x91\x07o\x02\x02\x91\x92\x07q\x02\x02\x92\x93\x07p\x02\x02\x93\x9C' +
    '\x07c\x02\x02\x94\x95\x07q\x02\x02\x95\x96\x07n\x02\x02\x96\x97\x07f\x02' +
    '\x02\x97\x98\x07"\x02\x02\x98\x99\x07s\x02\x02\x99\x9A\x07w\x02\x02\x9A' +
    '\x9C\x07g\x02\x02\x9B\x81\x03\x02\x02\x02\x9B\x87\x03\x02\x02\x02\x9B' +
    '\x90\x03\x02\x02\x02\x9B\x94\x03\x02\x02\x02\x9C$\x03\x02\x02\x02\x9D' +
    '\x9E\x07]\x02\x02\x9E\x9F\x05#\x12\x02\x9F\xA0\x07_\x02\x02\xA0&\x03\x02' +
    '\x02\x02\xA1\xA2\x07e\x02\x02\xA2\xA3\x07c\x02\x02\xA3\xA4\x07p\x02\x02' +
    '\xA4\xA5\x07e\x02\x02\xA5\xA6\x07g\x02\x02\xA6\xA7\x07n\x02\x02\xA7\xA8' +
    '\x07c\x02\x02\xA8\xA9\x07f\x02\x02\xA9\xAA\x07q\x02\x02\xAA(\x03\x02\x02' +
    '\x02\xAB\xAC\t\b\x02\x02\xAC*\x03\x02\x02\x02\xAD\xBE\t\x07\x02\x02\xAE' +
    '\xAF\x07>\x02\x02\xAF\xBE\x07?\x02\x02\xB0\xB1\x07@\x02\x02\xB1\xBE\x07' +
    '?\x02\x02\xB2\xB3\x07g\x02\x02\xB3\xBE\x07j\x02\x02\xB4\xB5\x07p\x02\x02' +
    '\xB5\xB6\x07c\x02\x02\xB6\xB7\x07q\x02\x02\xB7\xB8\x07g\x02\x02\xB8\xBE' +
    '\x07j\x02\x02\xB9\xBA\x07(\x02\x02\xBA\xBE\x07(\x02\x02\xBB\xBC\x07~\x02' +
    '\x02\xBC\xBE\x07~\x02\x02\xBD\xAD\x03\x02\x02\x02\xBD\xAE\x03\x02\x02' +
    '\x02\xBD\xB0\x03\x02\x02\x02\xBD\xB2\x03\x02\x02\x02\xBD\xB4\x03\x02\x02' +
    '\x02\xBD\xB9\x03\x02\x02\x02\xBD\xBB\x03\x02\x02\x02\xBE,\x03\x02\x02' +
    '\x02\n\x020ciq\x7F\x9B\xBD\x03\b\x02\x02'

  public static __ATN: ATN
  public static get _ATN(): ATN {
    if (!LaCreXLexer.__ATN) {
      LaCreXLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(LaCreXLexer._serializedATN),
      )
    }

    return LaCreXLexer.__ATN
  }
}
